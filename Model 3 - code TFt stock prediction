pip install pandas numpy pytorch-lightning pytorch-forecasting

import pandas as pd
import numpy as np
from pytorch_forecasting import TimeSeriesDataSet, TemporalFusionTransformer, Baseline
from pytorch_forecasting.data import GroupNormalizer
from pytorch_forecasting.metrics import QuantileLoss

# Load your stock data
data = pd.read_csv('your_stock_data.csv')
data['date'] = pd.to_datetime(data['date'])
data['time_idx'] = (data['date'] - data['date'].min()).dt.days

# Calculate additional features like moving averages, RSI, MACD, etc.
data['MA10'] = data['close'].rolling(window=10).mean()
data['MA50'] = data['close'].rolling(window=50).mean()
# Add more feature calculations as needed

# Drop rows with NaN values (due to rolling window calculations)
data.dropna(inplace=True)

# Normalize features
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
data[['volume', 'MA10', 'MA50']] = scaler.fit_transform(data[['volume', 'MA10', 'MA50']])

# Define the maximum encoder and prediction lengths
max_encoder_length = 60
max_prediction_length = 30

# Create the TimeSeriesDataSet
training = TimeSeriesDataSet(
    data[lambda x: x.time_idx <= x.time_idx.max() - max_prediction_length],
    time_idx='time_idx',
    target='close',
    group_ids=['series'],
    min_encoder_length=max_encoder_length // 2,
    max_encoder_length=max_encoder_length,
    min_prediction_length=1,
    max_prediction_length=max_prediction_length,
    static_categoricals=['series'],
    time_varying_known_reals=['time_idx', 'volume', 'MA10', 'MA50'],
    time_varying_unknown_reals=['close'],
    target_normalizer=GroupNormalizer(groups=['series'], transformation='softplus')
)

# Create the validation dataset
validation = TimeSeriesDataSet.from_dataset(training, data, min_prediction_idx=training.index.time.max() + 1)

# Create dataloaders
train_dataloader = training.to_dataloader(train=True, batch_size=64, num_workers=8)
val_dataloader = validation.to_dataloader(train=False, batch_size=64, num_workers=8)

# Define the TFT model
tft = TemporalFusionTransformer.from_dataset(
    training,
    learning_rate=0.01,
    hidden_size=64,
    attention_head_size=4,
    dropout=0.1,
    hidden_continuous_size=16,
    output_size=7,  # Quantile output size
    loss=QuantileLoss(),
    log_interval=10,
    reduce_on_plateau_patience=5,
)

import pytorch_lightning as pl

trainer = pl.Trainer(
    max_epochs=50,
    gpus=1,  # set to 0 if no GPU available
    gradient_clip_val=0.1,
)
trainer.fit(tft, train_dataloaders=train_dataloader, val_dataloaders=val_dataloader)

# Evaluate the model
best_model_path = trainer.checkpoint_callback.best_model_path
best_tft = TemporalFusionTransformer.load_from_checkpoint(best_model_path)

# Predict future stock prices
actuals = torch.cat([y[0] for x, y in iter(val_dataloader)])
predictions = best_tft.predict(val_dataloader)

# Visualize the predictions
import matplotlib.pyplot as plt

predictions = predictions.numpy()
plt.figure(figsize=(10, 6))
plt.plot(predictions, label='Predicted')
plt.plot(actuals.numpy(), label='Actual')
plt.legend()
plt.show()
